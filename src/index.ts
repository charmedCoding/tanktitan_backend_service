import express, { Response } from "express"
import log4js from "log4js"
import swaggerUi from "swagger-ui-express"
import bodyParser from "body-parser"
import cors from "cors"
import { RegisterRoutes } from "./routes"
import swaggerJson from "./swagger.json"
import { errorHandler } from "./utils/ErrorHandler"

export const app = express()

if (process.env.NODE_ENV != "test") {
	log4js.configure({
		appenders: {
			httpRequest: {
				type: "stdout",
				layout: { type: "pattern", pattern: '{"logCategory":"%c", "logLevel":"%p", "body":%m}' },
			},
		},
		categories: { default: { appenders: ["httpRequest"], level: "INFO" } },
	})

	app.use(
		log4js.connectLogger(log4js.getLogger("http request"), {
			level: "auto",
			format: '{"httpMethod":":method", "url":":url", "statusCode"::status, "processTimeMS"::response-time}',
		})
	)
}

// Use body parser to read sent json payloads
app.use(bodyParser.urlencoded({ extended: true }))
app.use(bodyParser.json())

// allow cors
const frontendOrigin = process.env.FRONTEND_ORIGIN || "http://localhost:8080"
app.use(cors({ credentials: true, origin: frontendOrigin }))

// import all autogenerated routes
RegisterRoutes(app)

// global error handling
app.use(errorHandler)

// swagger documentation
app.use(["/api/docs", "/api/swagger"], swaggerUi.serve, swaggerUi.setup(swaggerJson))

// 404 on missing Routes
app.use(function notFoundHandler(_req, res: Response) {
	res.status(404).json({
		errorType: "NotFoundError",
		message: "This ressource doesn't exist.",
	})
})
